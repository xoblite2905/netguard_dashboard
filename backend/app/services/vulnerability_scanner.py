import logging
import nmap
import json # We will need this to parse some script output
from sqlalchemy import select
from app.database import SessionLocal
from app.models import Host, Vulnerability

logger = logging.getLogger(__name__)

SCAN_SOURCE_NAME = 'Nmap-Vulners' # We've upgraded the scanner name

def run_vuln_scan():
    nm = nmap.PortScanner()
    db = SessionLocal()

    try:
        stmt = select(Host).where(Host.status == 'up')
        hosts = db.scalars(stmt).all()
        
        if not hosts:
            logger.info("No active hosts found to scan for vulnerabilities.")
            return

        host_ids_to_scan = [host.id for host in hosts]
        logger.info(f"Clearing old '{SCAN_SOURCE_NAME}' vulnerabilities for {len(host_ids_to_scan)} hosts.")
        
        db.query(Vulnerability).filter(
            Vulnerability.host_id.in_(host_ids_to_scan),
            Vulnerability.source == SCAN_SOURCE_NAME
        ).delete(synchronize_session=False)

        for host in hosts:
            logger.info(f"ðŸš¨ Running ADVANCED vulnerability scan on {host.ip_address}")
            try:
                # ### --- THE NEW, SMARTER SCAN COMMAND --- ###
                # -sV: Enumerate service versions (CRITICAL)
                # --script vulners: Use the Vulners CVE database script
                scan_arguments = '-sV --script vulners -T4 -Pn'
                nm.scan(hosts=host.ip_address, arguments=scan_arguments)

                if host.ip_address not in nm.all_hosts():
                    logger.warning(f"No scan results for {host.ip_address}. It might be down.")
                    continue

                scan_data = nm[host.ip_address]

                # Process TCP ports for vulnerabilities
                for port, port_data in scan_data.get('tcp', {}).items():
                    if 'script' in port_data and 'vulners' in port_data['script']:
                        vulners_output = port_data['script']['vulners']
                        
                        # The output is a string, often containing structured info.
                        # We'll parse it to extract CVEs.
                        for line in vulners_output.split('\n'):
                            if 'CVE-' in line: # A simple way to find CVE lines
                                parts = line.strip().split()
                                cve = next((part for part in parts if part.startswith('CVE-')), None)
                                score = parts[0]
                                description = ' '.join(parts[1:])

                                # Convert score to severity
                                try:
                                    cvss = float(score)
                                    if cvss >= 9.0: severity = "Critical"
                                    elif cvss >= 7.0: severity = "High"
                                    elif cvss >= 4.0: severity = "Medium"
                                    else: severity = "Low"
                                except ValueError:
                                    severity = "Info"

                                new_vulnerability = Vulnerability(
                                    host_ip=host.ip_address,
                                    port=port,
                                    service=port_data.get('name', 'N/A'),
                                    source=SCAN_SOURCE_NAME,
                                    severity=severity,
                                    description=description,
                                    cve=cve,
                                    host_id=host.id
                                )
                                db.add(new_vulnerability)

            except Exception as e:
                logger.error(f"Error running vuln scan on {host.ip_address}: {e}", exc_info=True)

        db.commit()

    except Exception as e:
        logger.error(f"A critical error occurred during the vulnerability scan process: {e}", exc_info=True)
        db.rollback()
    finally:
        db.close()