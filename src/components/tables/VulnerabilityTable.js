// src/components/tables/VulnerabilityTable.js
import React from 'react';

// Helper function to assign colors based on vulnerability severity
const getSeverityBadge = (severity) => {
    switch (severity?.toLowerCase()) {
        case 'critical':
            return 'bg-red-600 text-red-100';
        case 'high':
            return 'bg-orange-500 text-orange-100';
        case 'medium':
            return 'bg-yellow-500 text-yellow-100';
        default:
            return 'bg-blue-500 text-blue-100';
    }
};

const VulnerabilityTable = ({ vulnerabilities }) => {
    return (
        <>
            <h2 className="text-lg font-semibold mb-4 text-light-text dark:text-dark-text flex-shrink-0">
                Detected Vulnerabilities
            </h2>
            <div className="h-full overflow-y-auto flex-grow min-h-0">
                {/* 
                    FIX 1: "table-fixed" is the key. It forces the table to obey the widths
                    we define in the header, instead of trying to expand to fit its content.
                */}
                <table className="min-w-full text-sm text-left text-gray-500 dark:text-gray-400 table-fixed">
                    <thead className="text-xs text-gray-700 uppercase dark:text-gray-300 sticky top-0 bg-light-bg dark:bg-dark-bg">
                        <tr>
                            {/* FIX 2: Explicitly define the width of each column. */}
                            <th scope="col" className="px-4 py-3 w-[15%]">Severity</th>
                            <th scope="col" className="px-4 py-3 w-[20%]">Host IP</th>
                            <th scope="col" className="px-4 py-3 w-[10%]">Port</th>
                            <th scope="col" className="px-4 py-3 w-[40%]">Description</th>
                            <th scope="col" className="px-4 py-3 w-[15%]">CVE</th>
                        </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                        {vulnerabilities && vulnerabilities.length > 0 ? (
                            vulnerabilities.map((vuln, index) => (
                                <tr key={index} className="hover:bg-black/5 dark:hover:bg-white/5">
                                    <td className="px-4 py-4">
                                        <span className={`px-2 py-1 text-xs font-semibold rounded-md ${getSeverityBadge(vuln.severity)}`}>
                                            {vuln.severity}
                                        </span>
                                    </td>
                                    <td className="px-4 py-4 font-mono text-gray-900 dark:text-white">{vuln.host_ip}</td>
                                    <td className="px-4 py-4">{vuln.port}</td>
                                    {/* 
                                        FIX 3: Gracefully handle long text. "truncate" adds an ellipsis (...)
                                        and the "title" attribute provides the full text on hover for a great UX.
                                    */}
                                    <td 
                                      className="px-4 py-4 text-xs italic truncate" 
                                      title={vuln.description}
                                    >
                                        {vuln.description}
                                    </td>
                                    <td 
                                      className="px-4 py-4 font-mono text-xs truncate"
                                      title={vuln.cve}
                                    >
                                        {vuln.cve}
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="5" className="text-center py-8 text-gray-400">
                                    No vulnerabilities detected yet. Awaiting scan results.
                                </td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>
        </>
    );
};

export default VulnerabilityTable;