# Dockerfile.netguard (v2.4 - Final fix for ERESOLVE dependency conflict)

# --- Stage 1: Build the Node.js Frontend ---
FROM node:18.19.1-bullseye AS builder
WORKDIR /app

# Copy package.json and package-lock.json first
COPY package.json ./
COPY package-lock.json ./

# --- THIS IS THE FIX ---
# Use --legacy-peer-deps to ignore strict peer dependency conflicts, which is
# what is causing the ERESOLVE error with react-apexcharts.
RUN npm install --legacy-peer-deps

# Copy all remaining application source and config files.
COPY ./src ./src
COPY ./public ./public
COPY ./tailwind.config.js ./
COPY ./postcss.config.js ./

# Run the build command
RUN npm run build


# --- Stage 2: Build the Final Python Production Image ---
FROM python:3.12-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        tshark \
        nmap \
        netcat-openbsd \
        docker.io \
        docker-cli \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY ./backend/requirements.txt .
RUN python -m pip install --upgrade pip && \
    pip install \
      --no-cache-dir \
      -r requirements.txt && \
    pip install --no-cache-dir "uvicorn[standard]"

# Copy the entire backend directory
COPY ./backend /app

# Copy the built frontend FROM THE FIRST STAGE

COPY --from=builder /app/build ./build